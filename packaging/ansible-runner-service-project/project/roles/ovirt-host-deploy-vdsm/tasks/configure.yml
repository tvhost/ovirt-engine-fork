---
# Configure vdsm.
#
# NOTE: This must be done after creating host vdsm.id file.
#
# Order of next steps is important:
#     1. Configure lvm filter
#     2. Configure vdsm
#
# If we configure vdsm before configuring lvm filter, multipath may
# grab local devices that should be blacklisted. This may expose
# the local devices as FC storage in engine.

- block:
    - name: Mask libvirt modular daemon units
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: stopped
        enabled: false
        masked: true
      with_items:
        - virtqemud.service
        - virtqemud.socket
        - virtinterfaced.socket
        - virtnetworkd.socket
        - virtnodedevd.socket
        - virtnwfilterd.socket
        - virtsecretd.socket
        - virtstoraged.socket
        - virtproxyd.socket

    - name: Stop libvirtd
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: stopped
      with_items:
        - libvirtd.service
        - libvirtd.socket

    - name: Remove modular sockets
      ansible.builtin.shell: for i in virt{qemu,interface,network,nodedev,nwfilter,secret,storage,proxy}d libvirt; do rm -f /run/libvirt/${i}-*sock*; done;

    - name: Enable libvirtd monolithic daemon unit
      ansible.builtin.systemd:
        name: "{{ item }}"
        enabled: true
        state: started
      with_items:
        - libvirtd.service
        - libvirtd.socket

    # workaround for BZ 2054323
    - name: Change the openvswitch_t to permissive
      ansible.builtin.command: semanage permissive -a openvswitch_t
      changed_when: true

  when: el_ver | int >= 9


- name: Configure LVM filter
  ansible.builtin.command: vdsm-tool config-lvm-filter -y
  register: lvm_filter_result
  when: el_ver | int >= 8
  ignore_errors: true

- name: Check for LVM filter configuration error
  ansible.builtin.debug:
    msg: "[ERROR] Cannot configure LVM filter on host, please run: vdsm-tool config-lvm-filter"
  when:
    - el_ver | int >= 8
    - lvm_filter_result.rc != 0

- name: Configure host for vdsm
  ansible.builtin.command: vdsm-tool configure --force
  changed_when: true

- name: Check existence of /etc/fapolicyd/rules.d directory
  ansible.builtin.stat:
    path: /etc/fapolicyd/rules.d
  register: fapolicy_rules

- name: Collect facts about system services
  ansible.builtin.service_facts:

- block:
    - name: Add vdsm-mom allow rule to fapolicy
      ansible.builtin.copy:
        dest: /etc/fapolicyd/rules.d/32-allow-vdsm-mom.rules
        group: fapolicyd
        mode: '0644'
        remote_src: true
        content: |
          allow perm=any trust=1 : dir=/etc/vdsm/mom.d/ ftype=text/x-lisp
          allow perm=any trust=1 : dir=/var/tmp/ ftype=text/x-python

    - name: Restart fapolicy service
      ansible.builtin.systemd:
        state: restarted
        name: fapolicyd

  when:
    - fapolicy_rules.stat.exists
    - "'fapolicyd.service' in services"
    - ansible_facts.services["fapolicyd.service"].state == 'running'
